{"ast":null,"code":"var _jsxFileName = \"/Users/tahmidjamal/Desktop/bpm/process_optimization_tool/procopt/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Add API base URL\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n  // State for managing multiple jobs\n  const [jobs, setJobs] = useState([]);\n  const [selectedJobId, setSelectedJobId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [progress, setProgress] = useState({});\n\n  // Get the selected job from the jobs array\n  const selectedJob = jobs.find(job => job.runId === selectedJobId) || null;\n\n  // Progress status messages\n  const progressMessages = {\n    transcription: {\n      pending: \"Waiting to start...\",\n      processing: \"Analyzing process map...\",\n      complete: \"Process map analyzed\"\n    },\n    bottlenecks: {\n      pending: \"Waiting for process map...\",\n      processing: \"Identifying bottlenecks...\",\n      complete: \"Bottlenecks identified\"\n    },\n    improvements: {\n      pending: \"Waiting for bottlenecks...\",\n      processing: \"Generating improvement suggestions...\",\n      complete: \"Improvements generated\"\n    }\n  };\n\n  // Calculate overall progress percentage for a job\n  const calculateProgress = job => {\n    if (!job) return 0;\n    let baseProgress = 0;\n\n    // Process map transcription (33%)\n    if (job.processMap) {\n      baseProgress += 33;\n    } else if (progress[job.runId]) {\n      const transcriptionProgress = progress[job.runId].processed / progress[job.runId].total * 33;\n      baseProgress += transcriptionProgress;\n    }\n\n    // Bottlenecks identification (33%)\n    if (job.bottlenecks) {\n      baseProgress += 33;\n    } else if (job.bottlenecksRequested) {\n      baseProgress += 15;\n    }\n\n    // Improvements suggestions (34%)\n    if (job.improvements) {\n      baseProgress += 34;\n    } else if (job.improvementsRequested) {\n      baseProgress += 15;\n    }\n    return Math.min(100, Math.round(baseProgress));\n  };\n\n  // Get status message for a specific step\n  const getStepStatus = (job, step) => {\n    if (!job) return progressMessages[step].pending;\n    switch (step) {\n      case 'transcription':\n        // Always show as processing when a file is uploaded since transcription starts immediately\n        if (job.processMap) return progressMessages.transcription.complete;\n        // Always show processing for transcription since it starts immediately after upload\n        return progressMessages.transcription.processing;\n      case 'bottlenecks':\n        if (job.bottlenecks) return progressMessages.bottlenecks.complete;\n        return job.bottlenecksRequested ? progressMessages.bottlenecks.processing : progressMessages.bottlenecks.pending;\n      case 'improvements':\n        if (job.improvements) return progressMessages.improvements.complete;\n        return job.improvementsRequested ? progressMessages.improvements.processing : progressMessages.improvements.pending;\n      default:\n        return \"Unknown step\";\n    }\n  };\n\n  // Polling effect for all jobs\n  useEffect(() => {\n    if (jobs.length === 0) return;\n    const interval = setInterval(async () => {\n      // Create a copy of jobs to update\n      const updatedJobs = [...jobs];\n      let hasUpdates = false;\n\n      // Check each job that's not complete\n      for (let i = 0; i < updatedJobs.length; i++) {\n        var _job$status;\n        const job = updatedJobs[i];\n\n        // Skip jobs that are already complete\n        if (job.status === 'complete' || (_job$status = job.status) !== null && _job$status !== void 0 && _job$status.includes('failed')) continue;\n        try {\n          const response = await fetch(`${API_URL}/runs/${job.runId}`);\n          const data = await response.json();\n\n          // Update job data\n          if (data.status !== job.status || data.transcription !== job.processMap || data.bottlenecks !== job.bottlenecks || data.improvements !== job.improvements) {\n            // Calculate the current step based on available data\n            let newCurrentStep = job.currentStep;\n            if (data.transcription) newCurrentStep = Math.max(newCurrentStep, 2);\n            if (data.bottlenecks) newCurrentStep = Math.max(newCurrentStep, 3);\n            if (data.improvements) newCurrentStep = Math.max(newCurrentStep, 4);\n            updatedJobs[i] = {\n              ...job,\n              status: data.status,\n              processMap: data.transcription || job.processMap,\n              bottlenecks: data.bottlenecks || job.bottlenecks,\n              improvements: data.improvements || job.improvements,\n              currentStep: newCurrentStep,\n              total_blocks: data.total_blocks || job.total_blocks,\n              processed_blocks: data.processed_blocks || job.processed_blocks,\n              transcriptionInProgress: data.transcription ? false : true\n            };\n            hasUpdates = true;\n\n            // Automatically trigger the next step if needed\n            if (data.transcription && !data.bottlenecks && !job.bottlenecksRequested) {\n              // Mark this job as having bottlenecks requested to prevent multiple requests\n              updatedJobs[i].bottlenecksRequested = true;\n              // Queue the bottlenecks identification (will run after the state update)\n              setTimeout(() => identifyBottlenecks(job.runId), 1000);\n            }\n            if (data.bottlenecks && !data.improvements && !job.improvementsRequested) {\n              // Mark this job as having improvements requested to prevent multiple requests\n              updatedJobs[i].improvementsRequested = true;\n              // Queue the improvements suggestion (will run after the state update)\n              setTimeout(() => suggestImprovements(job.runId), 1000);\n            }\n          }\n        } catch (error) {\n          console.error(`Error polling for updates for job ${job.runId}:`, error);\n        }\n      }\n\n      // Only update state if there were changes\n      if (hasUpdates) {\n        setJobs(updatedJobs);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(interval);\n  }, [jobs, API_URL]);\n  const handleFileUpload = async event => {\n    const uploadedFiles = event.target.files;\n    if (uploadedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < uploadedFiles.length; i++) {\n      const file = uploadedFiles[i];\n      await processFile(file);\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = async event => {\n    event.preventDefault();\n    const droppedFiles = event.dataTransfer.files;\n    if (droppedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < droppedFiles.length; i++) {\n      const file = droppedFiles[i];\n      await processFile(file);\n    }\n  };\n  const processFile = async file => {\n    setLoading(true);\n    setUploadStatus(`Uploading ${file.name}...`);\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Upload response:', data);\n      if (data.run_id) {\n        // Create a new job and add it to the jobs array\n        const newJob = {\n          runId: data.run_id,\n          fileName: file.name,\n          status: 'processing',\n          processMap: '',\n          bottlenecks: '',\n          improvements: '',\n          currentStep: 1,\n          uploadTime: new Date().toLocaleString(),\n          bottlenecksRequested: false,\n          improvementsRequested: false,\n          transcriptionInProgress: true // Mark transcription as in progress when file is uploaded\n        };\n        setJobs(prevJobs => [...prevJobs, newJob]);\n\n        // Select the new job if no job is selected\n        if (!selectedJobId) {\n          setSelectedJobId(newJob.runId);\n        }\n        console.log('New job created:', newJob);\n        setUploadStatus(`${file.name} uploaded successfully!`);\n        setTimeout(() => setUploadStatus(''), 3000);\n        pollProgress(data.run_id);\n      } else {\n        throw new Error('No run_id received from server');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus(`Upload failed for ${file.name}: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const identifyBottlenecks = async runId => {\n    if (!runId) return;\n\n    // Find the job and mark it as having bottlenecks requested\n    setJobs(prevJobs => prevJobs.map(job => job.id === runId ? {\n      ...job,\n      bottlenecksRequested: true\n    } : job));\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/bottlenecks`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Bottlenecks response:', data);\n    } catch (error) {\n      console.error('Error identifying bottlenecks:', error);\n      alert('Error identifying bottlenecks: ' + error.message);\n\n      // Reset the requested flag on error\n      setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n        ...job,\n        bottlenecksRequested: false\n      } : job));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const suggestImprovements = async runId => {\n    if (!runId) return;\n\n    // Find the job and mark it as having improvements requested\n    setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n      ...job,\n      improvementsRequested: true\n    } : job));\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/improvements`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Improvements response:', data);\n    } catch (error) {\n      console.error('Error suggesting improvements:', error);\n      alert('Error suggesting improvements: ' + error.message);\n\n      // Reset the requested flag on error\n      setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n        ...job,\n        improvementsRequested: false\n      } : job));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const downloadAsMd = async (runId, type) => {\n    if (!runId) return;\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/export/${type}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Download response:', data);\n      const element = document.createElement('a');\n      const file = new Blob([data.content], {\n        type: 'text/markdown'\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = data.filename;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      alert('Error downloading file: ' + error.message);\n    }\n  };\n  const removeJob = runId => {\n    setJobs(prevJobs => prevJobs.filter(job => job.runId !== runId));\n\n    // If the removed job was selected, select another job or set to null\n    if (selectedJobId === runId) {\n      const remainingJobs = jobs.filter(job => job.runId !== runId);\n      setSelectedJobId(remainingJobs.length > 0 ? remainingJobs[0].runId : null);\n    }\n  };\n  const pollProgress = async jobId => {\n    try {\n      const response = await fetch(`${API_URL}/runs/${jobId}/progress`);\n      const data = await response.json();\n      setProgress(prev => ({\n        ...prev,\n        [jobId]: {\n          processed: data.processed_blocks,\n          total: data.total_blocks,\n          status: data.status\n        }\n      }));\n\n      // Continue polling if still processing\n      if (data.status === \"transcribing\") {\n        setTimeout(() => pollProgress(jobId), 2000);\n      }\n    } catch (error) {\n      console.error('Error polling progress:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"I\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-text\",\n          children: \"AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 14\n        }, this), \"S Tool\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Processes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \"image/*,.pdf\",\n              onChange: handleFileUpload,\n              id: \"file-upload\",\n              multiple: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"file-upload\",\n              className: \"upload-button\",\n              children: \"+ New Process Map\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jobs-list\",\n          children: jobs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-jobs\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Upload a process map to get started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this) : jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `job-item ${selectedJobId === job.runId ? 'selected' : ''}`,\n            onClick: () => setSelectedJobId(job.runId),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-name\",\n                children: job.fileName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-status\",\n                children: job.status === 'complete' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"status-indicator complete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 27\n                  }, this), \"Complete\"]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"status-indicator processing\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner-small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 27\n                  }, this), \"Processing\"]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-progress\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-fill\",\n                    style: {\n                      width: `${calculateProgress(job)}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-percentage\",\n                  children: [calculateProgress(job), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-time\",\n                children: job.uploadTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-job\",\n              onClick: e => {\n                e.stopPropagation();\n                removeJob(job.runId);\n              },\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 19\n            }, this)]\n          }, job.runId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-content\",\n        children: !selectedJob ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-area-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-area\",\n            onDragOver: handleDragOver,\n            onDrop: handleDrop,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Upload Process Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Drag and drop files here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"file-types\",\n                children: \"Limit 20MB per file (PDF, PNG, JPG, and JPEG)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"image/*,.pdf\",\n                onChange: handleFileUpload,\n                id: \"main-file-upload\",\n                multiple: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"main-file-upload\",\n                className: \"browse-button\",\n                children: \"Browse files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-status\",\n              children: uploadStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 34\n            }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading\",\n              children: \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"instructions\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Instructions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"To start, please upload an image or PDF of your process map. It can be a screenshot of a process map from a tool like Visio, Lucidchart, etc., a photo of a hand-drawn sketch, or any other visual representation of a process.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You can upload multiple process maps and they will be processed simultaneously.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedJob.fileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-actions\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => removeJob(selectedJob.runId),\n                children: \"Remove Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-progress-overview\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Overall Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar-large\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: `${calculateProgress(selectedJob)}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-steps\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.processMap ? 'complete' : 'active'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.processMap ? '✓' : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 526,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Process Map\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'transcription')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.bottlenecks ? 'complete' : selectedJob.bottlenecksRequested ? 'active' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.bottlenecks ? '✓' : selectedJob.bottlenecksRequested ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 537,\n                    columnNumber: 25\n                  }, this) : '2'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Bottlenecks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'bottlenecks')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.improvements ? 'complete' : selectedJob.improvementsRequested ? 'active' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.improvements ? '✓' : selectedJob.improvementsRequested ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 550,\n                    columnNumber: 25\n                  }, this) : '3'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 546,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Improvements\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'improvements')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"process-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Process Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 19\n              }, this), selectedJob.processMap ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.processMap, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'transcription'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'transcription')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"bottlenecks-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Bottlenecks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 19\n              }, this), selectedJob.currentStep >= 2 && !selectedJob.bottlenecks && !selectedJob.bottlenecksRequested && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => identifyBottlenecks(selectedJob.runId),\n                disabled: loading,\n                children: \"\\uD83D\\uDD0D Identify bottlenecks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 21\n              }, this), selectedJob.bottlenecksRequested && !selectedJob.bottlenecks && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'bottlenecks')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 21\n              }, this), selectedJob.bottlenecks ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.bottlenecks, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'bottlenecks'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 21\n              }, this) : selectedJob.currentStep < 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"waiting-message\",\n                children: getStepStatus(selectedJob, 'bottlenecks')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"improvements-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Improvements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 19\n              }, this), selectedJob.currentStep >= 3 && !selectedJob.improvements && !selectedJob.improvementsRequested && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => suggestImprovements(selectedJob.runId),\n                disabled: loading,\n                children: \"\\uD83D\\uDCA1 Suggest Improvements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 21\n              }, this), selectedJob.improvementsRequested && !selectedJob.improvements && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 629,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'improvements')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 21\n              }, this), selectedJob.improvements ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.improvements, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'improvements'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 21\n              }, this) : selectedJob.currentStep < 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"waiting-message\",\n                children: getStepStatus(selectedJob, 'improvements')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        selectedJob: selectedJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c7Te8fLV/zNgwnbTrHXrU/3kFyM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","API_URL","process","env","REACT_APP_API_URL","jobs","setJobs","selectedJobId","setSelectedJobId","loading","setLoading","uploadStatus","setUploadStatus","progress","setProgress","selectedJob","find","job","runId","progressMessages","transcription","pending","processing","complete","bottlenecks","improvements","calculateProgress","baseProgress","processMap","transcriptionProgress","processed","total","bottlenecksRequested","improvementsRequested","Math","min","round","getStepStatus","step","length","interval","setInterval","updatedJobs","hasUpdates","i","_job$status","status","includes","response","fetch","data","json","newCurrentStep","currentStep","max","total_blocks","processed_blocks","transcriptionInProgress","setTimeout","identifyBottlenecks","suggestImprovements","error","console","clearInterval","handleFileUpload","event","uploadedFiles","target","files","file","processFile","handleDragOver","preventDefault","handleDrop","droppedFiles","dataTransfer","name","formData","FormData","append","method","body","ok","Error","log","run_id","newJob","fileName","uploadTime","Date","toLocaleString","prevJobs","pollProgress","message","map","id","alert","downloadAsMd","type","element","document","createElement","Blob","content","href","URL","createObjectURL","download","filename","appendChild","click","removeChild","removeJob","filter","remainingJobs","jobId","prev","className","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","multiple","htmlFor","onClick","style","width","e","stopPropagation","onDragOver","onDrop","disabled","_c","$RefreshReg$"],"sources":["/Users/tahmidjamal/Desktop/bpm/process_optimization_tool/procopt/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chat from './Chat';\n\nfunction App() {\n  // Add API base URL\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n  \n  // State for managing multiple jobs\n  const [jobs, setJobs] = useState([]);\n  const [selectedJobId, setSelectedJobId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [progress, setProgress] = useState({});\n\n  // Get the selected job from the jobs array\n  const selectedJob = jobs.find(job => job.runId === selectedJobId) || null;\n\n  // Progress status messages\n  const progressMessages = {\n    transcription: {\n      pending: \"Waiting to start...\",\n      processing: \"Analyzing process map...\",\n      complete: \"Process map analyzed\"\n    },\n    bottlenecks: {\n      pending: \"Waiting for process map...\",\n      processing: \"Identifying bottlenecks...\",\n      complete: \"Bottlenecks identified\"\n    },\n    improvements: {\n      pending: \"Waiting for bottlenecks...\",\n      processing: \"Generating improvement suggestions...\",\n      complete: \"Improvements generated\"\n    }\n  };\n\n  // Calculate overall progress percentage for a job\n  const calculateProgress = (job) => {\n    if (!job) return 0;\n    let baseProgress = 0;\n    \n    // Process map transcription (33%)\n    if (job.processMap) {\n      baseProgress += 33;\n    } else if (progress[job.runId]) {\n      const transcriptionProgress = (progress[job.runId].processed / progress[job.runId].total) * 33;\n      baseProgress += transcriptionProgress;\n    }\n    \n    // Bottlenecks identification (33%)\n    if (job.bottlenecks) {\n      baseProgress += 33;\n    } else if (job.bottlenecksRequested) {\n      baseProgress += 15;\n    }\n    \n    // Improvements suggestions (34%)\n    if (job.improvements) {\n      baseProgress += 34;\n    } else if (job.improvementsRequested) {\n      baseProgress += 15;\n    }\n    \n    return Math.min(100, Math.round(baseProgress));\n  };\n\n  // Get status message for a specific step\n  const getStepStatus = (job, step) => {\n    if (!job) return progressMessages[step].pending;\n    \n    switch(step) {\n      case 'transcription':\n        // Always show as processing when a file is uploaded since transcription starts immediately\n        if (job.processMap) return progressMessages.transcription.complete;\n        // Always show processing for transcription since it starts immediately after upload\n        return progressMessages.transcription.processing;\n      \n      case 'bottlenecks':\n        if (job.bottlenecks) return progressMessages.bottlenecks.complete;\n        return job.bottlenecksRequested ? progressMessages.bottlenecks.processing : progressMessages.bottlenecks.pending;\n      \n      case 'improvements':\n        if (job.improvements) return progressMessages.improvements.complete;\n        return job.improvementsRequested ? progressMessages.improvements.processing : progressMessages.improvements.pending;\n      \n      default:\n        return \"Unknown step\";\n    }\n  };\n\n  // Polling effect for all jobs\n  useEffect(() => {\n    if (jobs.length === 0) return;\n\n    const interval = setInterval(async () => {\n      // Create a copy of jobs to update\n      const updatedJobs = [...jobs];\n      let hasUpdates = false;\n\n      // Check each job that's not complete\n      for (let i = 0; i < updatedJobs.length; i++) {\n        const job = updatedJobs[i];\n        \n        // Skip jobs that are already complete\n        if (job.status === 'complete' || job.status?.includes('failed')) continue;\n\n        try {\n          const response = await fetch(`${API_URL}/runs/${job.runId}`);\n          const data = await response.json();\n          \n          // Update job data\n          if (data.status !== job.status || \n              data.transcription !== job.processMap ||\n              data.bottlenecks !== job.bottlenecks ||\n              data.improvements !== job.improvements) {\n            \n            // Calculate the current step based on available data\n            let newCurrentStep = job.currentStep;\n            if (data.transcription) newCurrentStep = Math.max(newCurrentStep, 2);\n            if (data.bottlenecks) newCurrentStep = Math.max(newCurrentStep, 3);\n            if (data.improvements) newCurrentStep = Math.max(newCurrentStep, 4);\n            \n            updatedJobs[i] = {\n              ...job,\n              status: data.status,\n              processMap: data.transcription || job.processMap,\n              bottlenecks: data.bottlenecks || job.bottlenecks,\n              improvements: data.improvements || job.improvements,\n              currentStep: newCurrentStep,\n              total_blocks: data.total_blocks || job.total_blocks,\n              processed_blocks: data.processed_blocks || job.processed_blocks,\n              transcriptionInProgress: data.transcription ? false : true\n            };\n            hasUpdates = true;\n            \n            // Automatically trigger the next step if needed\n            if (data.transcription && !data.bottlenecks && !job.bottlenecksRequested) {\n              // Mark this job as having bottlenecks requested to prevent multiple requests\n              updatedJobs[i].bottlenecksRequested = true;\n              // Queue the bottlenecks identification (will run after the state update)\n              setTimeout(() => identifyBottlenecks(job.runId), 1000);\n            }\n            \n            if (data.bottlenecks && !data.improvements && !job.improvementsRequested) {\n              // Mark this job as having improvements requested to prevent multiple requests\n              updatedJobs[i].improvementsRequested = true;\n              // Queue the improvements suggestion (will run after the state update)\n              setTimeout(() => suggestImprovements(job.runId), 1000);\n            }\n          }\n        } catch (error) {\n          console.error(`Error polling for updates for job ${job.runId}:`, error);\n        }\n      }\n\n      // Only update state if there were changes\n      if (hasUpdates) {\n        setJobs(updatedJobs);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(interval);\n  }, [jobs, API_URL]);\n\n  const handleFileUpload = async (event) => {\n    const uploadedFiles = event.target.files;\n    if (uploadedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < uploadedFiles.length; i++) {\n      const file = uploadedFiles[i];\n      await processFile(file);\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = async (event) => {\n    event.preventDefault();\n    const droppedFiles = event.dataTransfer.files;\n    if (droppedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < droppedFiles.length; i++) {\n      const file = droppedFiles[i];\n      await processFile(file);\n    }\n  };\n\n  const processFile = async (file) => {\n    setLoading(true);\n    setUploadStatus(`Uploading ${file.name}...`);\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Upload response:', data);\n      \n      if (data.run_id) {\n        // Create a new job and add it to the jobs array\n        const newJob = {\n          runId: data.run_id,\n          fileName: file.name,\n          status: 'processing',\n          processMap: '',\n          bottlenecks: '',\n          improvements: '',\n          currentStep: 1,\n          uploadTime: new Date().toLocaleString(),\n          bottlenecksRequested: false,\n          improvementsRequested: false,\n          transcriptionInProgress: true // Mark transcription as in progress when file is uploaded\n        };\n        \n        setJobs(prevJobs => [...prevJobs, newJob]);\n        \n        // Select the new job if no job is selected\n        if (!selectedJobId) {\n          setSelectedJobId(newJob.runId);\n        }\n        console.log('New job created:', newJob);\n        \n        setUploadStatus(`${file.name} uploaded successfully!`);\n        setTimeout(() => setUploadStatus(''), 3000);\n        \n        pollProgress(data.run_id);\n      } else {\n        throw new Error('No run_id received from server');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus(`Upload failed for ${file.name}: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const identifyBottlenecks = async (runId) => {\n    if (!runId) return;\n    \n    // Find the job and mark it as having bottlenecks requested\n    setJobs(prevJobs => \n      prevJobs.map(job => \n        job.id === runId \n          ? { ...job, bottlenecksRequested: true } \n          : job\n      )\n    );\n    \n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/bottlenecks`, {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Bottlenecks response:', data);\n    } catch (error) {\n      console.error('Error identifying bottlenecks:', error);\n      alert('Error identifying bottlenecks: ' + error.message);\n      \n      // Reset the requested flag on error\n      setJobs(prevJobs => \n        prevJobs.map(job => \n          job.runId === runId \n            ? { ...job, bottlenecksRequested: false } \n            : job\n        )\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const suggestImprovements = async (runId) => {\n    if (!runId) return;\n    \n    // Find the job and mark it as having improvements requested\n    setJobs(prevJobs => \n      prevJobs.map(job => \n        job.runId === runId \n          ? { ...job, improvementsRequested: true } \n          : job\n      )\n    );\n    \n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/improvements`, {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Improvements response:', data);\n    } catch (error) {\n      console.error('Error suggesting improvements:', error);\n      alert('Error suggesting improvements: ' + error.message);\n      \n      // Reset the requested flag on error\n      setJobs(prevJobs => \n        prevJobs.map(job => \n          job.runId === runId \n            ? { ...job, improvementsRequested: false } \n            : job\n        )\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const downloadAsMd = async (runId, type) => {\n    if (!runId) return;\n    \n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/export/${type}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Download response:', data);\n      \n      const element = document.createElement('a');\n      const file = new Blob([data.content], {type: 'text/markdown'});\n      element.href = URL.createObjectURL(file);\n      element.download = data.filename;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      alert('Error downloading file: ' + error.message);\n    }\n  };\n\n  const removeJob = (runId) => {\n    setJobs(prevJobs => prevJobs.filter(job => job.runId !== runId));\n    \n    // If the removed job was selected, select another job or set to null\n    if (selectedJobId === runId) {\n      const remainingJobs = jobs.filter(job => job.runId !== runId);\n      setSelectedJobId(remainingJobs.length > 0 ? remainingJobs[0].runId : null);\n    }\n  };\n\n  const pollProgress = async (jobId) => {\n    try {\n      const response = await fetch(`${API_URL}/runs/${jobId}/progress`);\n      const data = await response.json();\n      \n      setProgress(prev => ({\n        ...prev,\n        [jobId]: {\n          processed: data.processed_blocks,\n          total: data.total_blocks,\n          status: data.status\n        }\n      }));\n\n      // Continue polling if still processing\n      if (data.status === \"transcribing\") {\n        setTimeout(() => pollProgress(jobId), 2000);\n      }\n    } catch (error) {\n      console.error('Error polling progress:', error);\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <header className=\"dashboard-header\">\n        <h1>I<span className=\"ai-text\">AI</span>S Tool</h1>\n      </header>\n      \n      <div className=\"dashboard-content\">\n        <aside className=\"sidebar\">\n          <div className=\"sidebar-header\">\n            <h2>Processes</h2>\n            <div className=\"upload-container\">\n              <input\n                type=\"file\"\n                accept=\"image/*,.pdf\"\n                onChange={handleFileUpload}\n                id=\"file-upload\"\n                multiple\n              />\n              <label htmlFor=\"file-upload\" className=\"upload-button\">\n                + New Process Map\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"jobs-list\">\n            {jobs.length === 0 ? (\n              <div className=\"no-jobs\">\n                <p>Upload a process map to get started</p>\n              </div>\n            ) : (\n              jobs.map(job => (\n                <div \n                  key={job.runId} \n                  className={`job-item ${selectedJobId === job.runId ? 'selected' : ''}`}\n                  onClick={() => setSelectedJobId(job.runId)}\n                >\n                  <div className=\"job-info\">\n                    <div className=\"job-name\">{job.fileName}</div>\n                    <div className=\"job-status\">\n                      {job.status === 'complete' ? (\n                        <>\n                          <span className=\"status-indicator complete\"></span>\n                          Complete\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"status-indicator processing\"></span>\n                          <span className=\"spinner-small\"></span>\n                          Processing\n                        </>\n                      )}\n                    </div>\n                    <div className=\"job-progress\">\n                      <div className=\"progress-bar\">\n                        <div \n                          className=\"progress-fill\" \n                          style={{ width: `${calculateProgress(job)}%` }}\n                        ></div>\n                      </div>\n                      <div className=\"progress-percentage\">{calculateProgress(job)}%</div>\n                    </div>\n                    <div className=\"job-time\">{job.uploadTime}</div>\n                  </div>\n                  <button \n                    className=\"remove-job\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeJob(job.runId);\n                    }}\n                  >\n                    ×\n                  </button>\n                </div>\n              ))\n            )}\n          </div>\n        </aside>\n        \n        <main className=\"main-content\">\n          {!selectedJob ? (\n            <div className=\"upload-area-container\">\n              <div \n                className=\"upload-area\"\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n              >\n                <div className=\"upload-content\">\n                  <h3>Upload Process Map</h3>\n                  <p>Drag and drop files here</p>\n                  <p className=\"file-types\">Limit 20MB per file (PDF, PNG, JPG, and JPEG)</p>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*,.pdf\"\n                    onChange={handleFileUpload}\n                    id=\"main-file-upload\"\n                    multiple\n                  />\n                  <label htmlFor=\"main-file-upload\" className=\"browse-button\">\n                    Browse files\n                  </label>\n                </div>\n                {uploadStatus && <div className=\"upload-status\">{uploadStatus}</div>}\n                {loading && <div className=\"loading\">Processing...</div>}\n              </div>\n              \n              <section className=\"instructions\">\n                <h2>Instructions</h2>\n                <p>To start, please upload an image or PDF of your process map. It can be a screenshot of a process map from a tool like Visio, Lucidchart, etc., a photo of a hand-drawn sketch, or any other visual representation of a process.</p>\n                <p>You can upload multiple process maps and they will be processed simultaneously.</p>\n              </section>\n            </div>\n          ) : (\n            <div className=\"job-details\">\n              <div className=\"job-header\">\n                <h2>{selectedJob.fileName}</h2>\n                <div className=\"job-actions\">\n                  <button \n                    className=\"action-button\"\n                    onClick={() => removeJob(selectedJob.runId)}\n                  >\n                    Remove Job\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"job-progress-overview\">\n                <h3>Overall Progress</h3>\n                <div className=\"progress-bar-large\">\n                  <div \n                    className=\"progress-fill\" \n                    style={{ width: `${calculateProgress(selectedJob)}%` }}\n                  ></div>\n                </div>\n                <div className=\"progress-steps\">\n                  <div className={`progress-step ${selectedJob.processMap ? 'complete' : 'active'}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.processMap ? (\n                        '✓'\n                      ) : (\n                        <span className=\"spinner\"></span>\n                      )}\n                    </div>\n                    <div className=\"step-label\">Process Map</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'transcription')}</div>\n                  </div>\n                  <div className={`progress-step ${selectedJob.bottlenecks ? 'complete' : selectedJob.bottlenecksRequested ? 'active' : ''}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.bottlenecks ? (\n                        '✓'\n                      ) : selectedJob.bottlenecksRequested ? (\n                        <span className=\"spinner\"></span>\n                      ) : (\n                        '2'\n                      )}\n                    </div>\n                    <div className=\"step-label\">Bottlenecks</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'bottlenecks')}</div>\n                  </div>\n                  <div className={`progress-step ${selectedJob.improvements ? 'complete' : selectedJob.improvementsRequested ? 'active' : ''}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.improvements ? (\n                        '✓'\n                      ) : selectedJob.improvementsRequested ? (\n                        <span className=\"spinner\"></span>\n                      ) : (\n                        '3'\n                      )}\n                    </div>\n                    <div className=\"step-label\">Improvements</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'improvements')}</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"job-content\">\n                <section className=\"process-section\">\n                  <h3>Process Map</h3>\n                  {selectedJob.processMap ? (\n                    <div className=\"text-area\">\n                      {selectedJob.processMap}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'transcription')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'transcription')}\n                    </div>\n                  )}\n                </section>\n                \n                <section className=\"bottlenecks-section\">\n                  <h3>Bottlenecks</h3>\n                  {selectedJob.currentStep >= 2 && !selectedJob.bottlenecks && !selectedJob.bottlenecksRequested && (\n                    <button \n                      className=\"action-button\" \n                      onClick={() => identifyBottlenecks(selectedJob.runId)}\n                      disabled={loading}\n                    >\n                      🔍 Identify bottlenecks\n                    </button>\n                  )}\n                  {selectedJob.bottlenecksRequested && !selectedJob.bottlenecks && (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'bottlenecks')}\n                    </div>\n                  )}\n                  {selectedJob.bottlenecks ? (\n                    <div className=\"text-area\">\n                      {selectedJob.bottlenecks}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'bottlenecks')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : selectedJob.currentStep < 2 ? (\n                    <div className=\"waiting-message\">\n                      {getStepStatus(selectedJob, 'bottlenecks')}\n                    </div>\n                  ) : null}\n                </section>\n                \n                <section className=\"improvements-section\">\n                  <h3>Improvements</h3>\n                  {selectedJob.currentStep >= 3 && !selectedJob.improvements && !selectedJob.improvementsRequested && (\n                    <button \n                      className=\"action-button\" \n                      onClick={() => suggestImprovements(selectedJob.runId)}\n                      disabled={loading}\n                    >\n                      💡 Suggest Improvements\n                    </button>\n                  )}\n                  {selectedJob.improvementsRequested && !selectedJob.improvements && (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'improvements')}\n                    </div>\n                  )}\n                  {selectedJob.improvements ? (\n                    <div className=\"text-area\">\n                      {selectedJob.improvements}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'improvements')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : selectedJob.currentStep < 3 ? (\n                    <div className=\"waiting-message\">\n                      {getStepStatus(selectedJob, 'improvements')}\n                    </div>\n                  ) : null}\n                </section>\n              </div>\n            </div>\n          )}\n        </main>\n\n        <Chat selectedJob={selectedJob} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}