{"ast":null,"code":"var _jsxFileName = \"/Users/tahmidjamal/Desktop/bpm/process_optimization_tool/procopt/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Add API base URL\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n  // State for managing multiple jobs\n  const [jobs, setJobs] = useState([]);\n  const [selectedJobId, setSelectedJobId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n\n  // Get the selected job from the jobs array\n  const selectedJob = jobs.find(job => job.runId === selectedJobId) || null;\n\n  // Progress status messages\n  const progressMessages = {\n    transcription: {\n      pending: \"Waiting to start...\",\n      processing: \"Analyzing process map...\",\n      complete: \"Process map analyzed\"\n    },\n    bottlenecks: {\n      pending: \"Waiting for process map...\",\n      processing: \"Identifying bottlenecks...\",\n      complete: \"Bottlenecks identified\"\n    },\n    improvements: {\n      pending: \"Waiting for bottlenecks...\",\n      processing: \"Generating improvement suggestions...\",\n      complete: \"Improvements generated\"\n    }\n  };\n\n  // Calculate overall progress percentage for a job\n  const calculateProgress = job => {\n    if (!job) return 0;\n    let progress = 0;\n\n    // Process map transcription (33%)\n    if (job.processMap) {\n      progress += 33;\n    } else if (job.transcriptionInProgress) {\n      // Calculate progress based on blocks\n      const blockProgress = job.processed_blocks / job.total_blocks * 33;\n      progress += blockProgress || 0;\n    }\n\n    // Bottlenecks identification (33%)\n    if (job.bottlenecks) {\n      progress += 33;\n    } else if (job.bottlenecksRequested) {\n      progress += 15;\n    }\n\n    // Improvements suggestions (34%)\n    if (job.improvements) {\n      progress += 34;\n    } else if (job.improvementsRequested) {\n      progress += 15;\n    }\n    return Math.min(100, Math.round(progress));\n  };\n\n  // Get status message for a specific step\n  const getStepStatus = (job, step) => {\n    if (!job) return progressMessages[step].pending;\n    switch (step) {\n      case 'transcription':\n        // Always show as processing when a file is uploaded since transcription starts immediately\n        if (job.processMap) return progressMessages.transcription.complete;\n        // Always show processing for transcription since it starts immediately after upload\n        return progressMessages.transcription.processing;\n      case 'bottlenecks':\n        if (job.bottlenecks) return progressMessages.bottlenecks.complete;\n        return job.bottlenecksRequested ? progressMessages.bottlenecks.processing : progressMessages.bottlenecks.pending;\n      case 'improvements':\n        if (job.improvements) return progressMessages.improvements.complete;\n        return job.improvementsRequested ? progressMessages.improvements.processing : progressMessages.improvements.pending;\n      default:\n        return \"Unknown step\";\n    }\n  };\n\n  // Polling effect for all jobs\n  useEffect(() => {\n    if (jobs.length === 0) return;\n    const interval = setInterval(async () => {\n      // Create a copy of jobs to update\n      const updatedJobs = [...jobs];\n      let hasUpdates = false;\n\n      // Check each job that's not complete\n      for (let i = 0; i < updatedJobs.length; i++) {\n        var _job$status;\n        const job = updatedJobs[i];\n\n        // Skip jobs that are already complete\n        if (job.status === 'complete' || (_job$status = job.status) !== null && _job$status !== void 0 && _job$status.includes('failed')) continue;\n        try {\n          const response = await fetch(`${API_URL}/runs/${job.runId}`);\n          const data = await response.json();\n\n          // Update job data\n          if (data.status !== job.status || data.transcription !== job.processMap || data.bottlenecks !== job.bottlenecks || data.improvements !== job.improvements) {\n            // Calculate the current step based on available data\n            let newCurrentStep = job.currentStep;\n            if (data.transcription) newCurrentStep = Math.max(newCurrentStep, 2);\n            if (data.bottlenecks) newCurrentStep = Math.max(newCurrentStep, 3);\n            if (data.improvements) newCurrentStep = Math.max(newCurrentStep, 4);\n            updatedJobs[i] = {\n              ...job,\n              status: data.status,\n              processMap: data.transcription || job.processMap,\n              bottlenecks: data.bottlenecks || job.bottlenecks,\n              improvements: data.improvements || job.improvements,\n              currentStep: newCurrentStep,\n              // Keep transcriptionInProgress true until we get the transcription\n              transcriptionInProgress: data.transcription ? false : true\n            };\n            hasUpdates = true;\n\n            // Automatically trigger the next step if needed\n            if (data.transcription && !data.bottlenecks && !job.bottlenecksRequested) {\n              // Mark this job as having bottlenecks requested to prevent multiple requests\n              updatedJobs[i].bottlenecksRequested = true;\n              // Queue the bottlenecks identification (will run after the state update)\n              setTimeout(() => identifyBottlenecks(job.runId), 1000);\n            }\n            if (data.bottlenecks && !data.improvements && !job.improvementsRequested) {\n              // Mark this job as having improvements requested to prevent multiple requests\n              updatedJobs[i].improvementsRequested = true;\n              // Queue the improvements suggestion (will run after the state update)\n              setTimeout(() => suggestImprovements(job.runId), 1000);\n            }\n          }\n        } catch (error) {\n          console.error(`Error polling for updates for job ${job.runId}:`, error);\n        }\n      }\n\n      // Only update state if there were changes\n      if (hasUpdates) {\n        setJobs(updatedJobs);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(interval);\n  }, [jobs, API_URL]);\n  const handleFileUpload = async event => {\n    const uploadedFiles = event.target.files;\n    if (uploadedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < uploadedFiles.length; i++) {\n      const file = uploadedFiles[i];\n      await processFile(file);\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = async event => {\n    event.preventDefault();\n    const droppedFiles = event.dataTransfer.files;\n    if (droppedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < droppedFiles.length; i++) {\n      const file = droppedFiles[i];\n      await processFile(file);\n    }\n  };\n  const processFile = async file => {\n    setLoading(true);\n    setUploadStatus(`Uploading ${file.name}...`);\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Upload response:', data);\n      if (data.run_id) {\n        // Create a new job and add it to the jobs array\n        const newJob = {\n          runId: data.run_id,\n          fileName: file.name,\n          status: 'processing',\n          processMap: '',\n          bottlenecks: '',\n          improvements: '',\n          currentStep: 1,\n          uploadTime: new Date().toLocaleString(),\n          bottlenecksRequested: false,\n          improvementsRequested: false,\n          transcriptionInProgress: true // Mark transcription as in progress when file is uploaded\n        };\n        setJobs(prevJobs => [...prevJobs, newJob]);\n\n        // Select the new job if no job is selected\n        if (!selectedJobId) {\n          setSelectedJobId(newJob.runId);\n        }\n        console.log('New job created:', newJob);\n        setUploadStatus(`${file.name} uploaded successfully!`);\n        setTimeout(() => setUploadStatus(''), 3000);\n      } else {\n        throw new Error('No run_id received from server');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus(`Upload failed for ${file.name}: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const identifyBottlenecks = async runId => {\n    if (!runId) return;\n\n    // Find the job and mark it as having bottlenecks requested\n    setJobs(prevJobs => prevJobs.map(job => job.id === runId ? {\n      ...job,\n      bottlenecksRequested: true\n    } : job));\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/bottlenecks`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Bottlenecks response:', data);\n    } catch (error) {\n      console.error('Error identifying bottlenecks:', error);\n      alert('Error identifying bottlenecks: ' + error.message);\n\n      // Reset the requested flag on error\n      setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n        ...job,\n        bottlenecksRequested: false\n      } : job));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const suggestImprovements = async runId => {\n    if (!runId) return;\n\n    // Find the job and mark it as having improvements requested\n    setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n      ...job,\n      improvementsRequested: true\n    } : job));\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/improvements`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Improvements response:', data);\n    } catch (error) {\n      console.error('Error suggesting improvements:', error);\n      alert('Error suggesting improvements: ' + error.message);\n\n      // Reset the requested flag on error\n      setJobs(prevJobs => prevJobs.map(job => job.runId === runId ? {\n        ...job,\n        improvementsRequested: false\n      } : job));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const downloadAsMd = async (runId, type) => {\n    if (!runId) return;\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/export/${type}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Download response:', data);\n      const element = document.createElement('a');\n      const file = new Blob([data.content], {\n        type: 'text/markdown'\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = data.filename;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      alert('Error downloading file: ' + error.message);\n    }\n  };\n  const removeJob = runId => {\n    setJobs(prevJobs => prevJobs.filter(job => job.runId !== runId));\n\n    // If the removed job was selected, select another job or set to null\n    if (selectedJobId === runId) {\n      const remainingJobs = jobs.filter(job => job.runId !== runId);\n      setSelectedJobId(remainingJobs.length > 0 ? remainingJobs[0].runId : null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"I\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ai-text\",\n          children: \"AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 14\n        }, this), \"S Tool\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Processes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \"image/*,.pdf\",\n              onChange: handleFileUpload,\n              id: \"file-upload\",\n              multiple: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"file-upload\",\n              className: \"upload-button\",\n              children: \"+ New Process Map\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jobs-list\",\n          children: jobs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-jobs\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Upload a process map to get started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this) : jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `job-item ${selectedJobId === job.runId ? 'selected' : ''}`,\n            onClick: () => setSelectedJobId(job.runId),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-name\",\n                children: job.fileName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-status\",\n                children: job.status === 'complete' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"status-indicator complete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 27\n                  }, this), \"Complete\"]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"status-indicator processing\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner-small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 27\n                  }, this), \"Processing\"]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-progress\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-bar\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progress-fill\",\n                    style: {\n                      width: `${calculateProgress(job)}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-percentage\",\n                  children: [calculateProgress(job), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"job-time\",\n                children: job.uploadTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-job\",\n              onClick: e => {\n                e.stopPropagation();\n                removeJob(job.runId);\n              },\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 19\n            }, this)]\n          }, job.runId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-content\",\n        children: !selectedJob ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-area-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-area\",\n            onDragOver: handleDragOver,\n            onDrop: handleDrop,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Upload Process Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Drag and drop files here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"file-types\",\n                children: \"Limit 20MB per file (PDF, PNG, JPG, and JPEG)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"image/*,.pdf\",\n                onChange: handleFileUpload,\n                id: \"main-file-upload\",\n                multiple: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"main-file-upload\",\n                className: \"browse-button\",\n                children: \"Browse files\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-status\",\n              children: uploadStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 34\n            }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading\",\n              children: \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"instructions\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Instructions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"To start, please upload an image or PDF of your process map. It can be a screenshot of a process map from a tool like Visio, Lucidchart, etc., a photo of a hand-drawn sketch, or any other visual representation of a process.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You can upload multiple process maps and they will be processed simultaneously.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedJob.fileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"job-actions\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => removeJob(selectedJob.runId),\n                children: \"Remove Job\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-progress-overview\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Overall Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar-large\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: `${calculateProgress(selectedJob)}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-steps\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.processMap ? 'complete' : 'active'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.processMap ? '✓' : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 501,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Process Map\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 504,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'transcription')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.bottlenecks ? 'complete' : selectedJob.bottlenecksRequested ? 'active' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.bottlenecks ? '✓' : selectedJob.bottlenecksRequested ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 512,\n                    columnNumber: 25\n                  }, this) : '2'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Bottlenecks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'bottlenecks')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `progress-step ${selectedJob.improvements ? 'complete' : selectedJob.improvementsRequested ? 'active' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-indicator\",\n                  children: selectedJob.improvements ? '✓' : selectedJob.improvementsRequested ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"spinner\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 525,\n                    columnNumber: 25\n                  }, this) : '3'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-label\",\n                  children: \"Improvements\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"step-status\",\n                  children: getStepStatus(selectedJob, 'improvements')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"process-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Process Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 19\n              }, this), selectedJob.processMap ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.processMap, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'transcription'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'transcription')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"bottlenecks-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Bottlenecks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 19\n              }, this), selectedJob.currentStep >= 2 && !selectedJob.bottlenecks && !selectedJob.bottlenecksRequested && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => identifyBottlenecks(selectedJob.runId),\n                disabled: loading,\n                children: \"\\uD83D\\uDD0D Identify bottlenecks\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 21\n              }, this), selectedJob.bottlenecksRequested && !selectedJob.bottlenecks && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'bottlenecks')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this), selectedJob.bottlenecks ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.bottlenecks, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'bottlenecks'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 21\n              }, this) : selectedJob.currentStep < 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"waiting-message\",\n                children: getStepStatus(selectedJob, 'bottlenecks')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"improvements-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Improvements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 19\n              }, this), selectedJob.currentStep >= 3 && !selectedJob.improvements && !selectedJob.improvementsRequested && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-button\",\n                onClick: () => suggestImprovements(selectedJob.runId),\n                disabled: loading,\n                children: \"\\uD83D\\uDCA1 Suggest Improvements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 21\n              }, this), selectedJob.improvementsRequested && !selectedJob.improvements && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"processing-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner-inline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 604,\n                  columnNumber: 23\n                }, this), getStepStatus(selectedJob, 'improvements')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 21\n              }, this), selectedJob.improvements ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-area\",\n                children: [selectedJob.improvements, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"download-button\",\n                  onClick: () => downloadAsMd(selectedJob.runId, 'improvements'),\n                  children: \"Download as .md\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 21\n              }, this) : selectedJob.currentStep < 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"waiting-message\",\n                children: getStepStatus(selectedJob, 'improvements')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        selectedJob: selectedJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"60gJolkscacWX31cYGX/Rf5vnZc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","API_URL","process","env","REACT_APP_API_URL","jobs","setJobs","selectedJobId","setSelectedJobId","loading","setLoading","uploadStatus","setUploadStatus","selectedJob","find","job","runId","progressMessages","transcription","pending","processing","complete","bottlenecks","improvements","calculateProgress","progress","processMap","transcriptionInProgress","blockProgress","processed_blocks","total_blocks","bottlenecksRequested","improvementsRequested","Math","min","round","getStepStatus","step","length","interval","setInterval","updatedJobs","hasUpdates","i","_job$status","status","includes","response","fetch","data","json","newCurrentStep","currentStep","max","setTimeout","identifyBottlenecks","suggestImprovements","error","console","clearInterval","handleFileUpload","event","uploadedFiles","target","files","file","processFile","handleDragOver","preventDefault","handleDrop","droppedFiles","dataTransfer","name","formData","FormData","append","method","body","ok","Error","log","run_id","newJob","fileName","uploadTime","Date","toLocaleString","prevJobs","message","map","id","alert","downloadAsMd","type","element","document","createElement","Blob","content","href","URL","createObjectURL","download","filename","appendChild","click","removeChild","removeJob","filter","remainingJobs","className","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","multiple","htmlFor","onClick","style","width","e","stopPropagation","onDragOver","onDrop","disabled","_c","$RefreshReg$"],"sources":["/Users/tahmidjamal/Desktop/bpm/process_optimization_tool/procopt/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chat from './Chat';\n\nfunction App() {\n  // Add API base URL\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n  \n  // State for managing multiple jobs\n  const [jobs, setJobs] = useState([]);\n  const [selectedJobId, setSelectedJobId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n\n  // Get the selected job from the jobs array\n  const selectedJob = jobs.find(job => job.runId === selectedJobId) || null;\n\n  // Progress status messages\n  const progressMessages = {\n    transcription: {\n      pending: \"Waiting to start...\",\n      processing: \"Analyzing process map...\",\n      complete: \"Process map analyzed\"\n    },\n    bottlenecks: {\n      pending: \"Waiting for process map...\",\n      processing: \"Identifying bottlenecks...\",\n      complete: \"Bottlenecks identified\"\n    },\n    improvements: {\n      pending: \"Waiting for bottlenecks...\",\n      processing: \"Generating improvement suggestions...\",\n      complete: \"Improvements generated\"\n    }\n  };\n\n  // Calculate overall progress percentage for a job\n  const calculateProgress = (job) => {\n    if (!job) return 0;\n    \n    let progress = 0;\n    \n    // Process map transcription (33%)\n    if (job.processMap) {\n        progress += 33;\n    } else if (job.transcriptionInProgress) {\n        // Calculate progress based on blocks\n        const blockProgress = (job.processed_blocks / job.total_blocks) * 33;\n        progress += blockProgress || 0;\n    }\n    \n    // Bottlenecks identification (33%)\n    if (job.bottlenecks) {\n        progress += 33;\n    } else if (job.bottlenecksRequested) {\n        progress += 15;\n    }\n    \n    // Improvements suggestions (34%)\n    if (job.improvements) {\n        progress += 34;\n    } else if (job.improvementsRequested) {\n        progress += 15;\n    }\n    \n    return Math.min(100, Math.round(progress));\n  };\n\n  // Get status message for a specific step\n  const getStepStatus = (job, step) => {\n    if (!job) return progressMessages[step].pending;\n    \n    switch(step) {\n      case 'transcription':\n        // Always show as processing when a file is uploaded since transcription starts immediately\n        if (job.processMap) return progressMessages.transcription.complete;\n        // Always show processing for transcription since it starts immediately after upload\n        return progressMessages.transcription.processing;\n      \n      case 'bottlenecks':\n        if (job.bottlenecks) return progressMessages.bottlenecks.complete;\n        return job.bottlenecksRequested ? progressMessages.bottlenecks.processing : progressMessages.bottlenecks.pending;\n      \n      case 'improvements':\n        if (job.improvements) return progressMessages.improvements.complete;\n        return job.improvementsRequested ? progressMessages.improvements.processing : progressMessages.improvements.pending;\n      \n      default:\n        return \"Unknown step\";\n    }\n  };\n\n  // Polling effect for all jobs\n  useEffect(() => {\n    if (jobs.length === 0) return;\n\n    const interval = setInterval(async () => {\n      // Create a copy of jobs to update\n      const updatedJobs = [...jobs];\n      let hasUpdates = false;\n\n      // Check each job that's not complete\n      for (let i = 0; i < updatedJobs.length; i++) {\n        const job = updatedJobs[i];\n        \n        // Skip jobs that are already complete\n        if (job.status === 'complete' || job.status?.includes('failed')) continue;\n\n        try {\n          const response = await fetch(`${API_URL}/runs/${job.runId}`);\n          const data = await response.json();\n          \n          // Update job data\n          if (data.status !== job.status || \n              data.transcription !== job.processMap ||\n              data.bottlenecks !== job.bottlenecks ||\n              data.improvements !== job.improvements) {\n            \n            // Calculate the current step based on available data\n            let newCurrentStep = job.currentStep;\n            if (data.transcription) newCurrentStep = Math.max(newCurrentStep, 2);\n            if (data.bottlenecks) newCurrentStep = Math.max(newCurrentStep, 3);\n            if (data.improvements) newCurrentStep = Math.max(newCurrentStep, 4);\n            \n            updatedJobs[i] = {\n              ...job,\n              status: data.status,\n              processMap: data.transcription || job.processMap,\n              bottlenecks: data.bottlenecks || job.bottlenecks,\n              improvements: data.improvements || job.improvements,\n              currentStep: newCurrentStep,\n              // Keep transcriptionInProgress true until we get the transcription\n              transcriptionInProgress: data.transcription ? false : true\n            };\n            hasUpdates = true;\n            \n            // Automatically trigger the next step if needed\n            if (data.transcription && !data.bottlenecks && !job.bottlenecksRequested) {\n              // Mark this job as having bottlenecks requested to prevent multiple requests\n              updatedJobs[i].bottlenecksRequested = true;\n              // Queue the bottlenecks identification (will run after the state update)\n              setTimeout(() => identifyBottlenecks(job.runId), 1000);\n            }\n            \n            if (data.bottlenecks && !data.improvements && !job.improvementsRequested) {\n              // Mark this job as having improvements requested to prevent multiple requests\n              updatedJobs[i].improvementsRequested = true;\n              // Queue the improvements suggestion (will run after the state update)\n              setTimeout(() => suggestImprovements(job.runId), 1000);\n            }\n          }\n        } catch (error) {\n          console.error(`Error polling for updates for job ${job.runId}:`, error);\n        }\n      }\n\n      // Only update state if there were changes\n      if (hasUpdates) {\n        setJobs(updatedJobs);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(interval);\n  }, [jobs, API_URL]);\n\n  const handleFileUpload = async (event) => {\n    const uploadedFiles = event.target.files;\n    if (uploadedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < uploadedFiles.length; i++) {\n      const file = uploadedFiles[i];\n      await processFile(file);\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = async (event) => {\n    event.preventDefault();\n    const droppedFiles = event.dataTransfer.files;\n    if (droppedFiles.length === 0) return;\n\n    // Process each file\n    for (let i = 0; i < droppedFiles.length; i++) {\n      const file = droppedFiles[i];\n      await processFile(file);\n    }\n  };\n\n  const processFile = async (file) => {\n    setLoading(true);\n    setUploadStatus(`Uploading ${file.name}...`);\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Upload response:', data);\n      \n      if (data.run_id) {\n        // Create a new job and add it to the jobs array\n        const newJob = {\n          runId: data.run_id,\n          fileName: file.name,\n          status: 'processing',\n          processMap: '',\n          bottlenecks: '',\n          improvements: '',\n          currentStep: 1,\n          uploadTime: new Date().toLocaleString(),\n          bottlenecksRequested: false,\n          improvementsRequested: false,\n          transcriptionInProgress: true // Mark transcription as in progress when file is uploaded\n        };\n        \n        setJobs(prevJobs => [...prevJobs, newJob]);\n        \n        // Select the new job if no job is selected\n        if (!selectedJobId) {\n          setSelectedJobId(newJob.runId);\n        }\n        console.log('New job created:', newJob);\n        \n        setUploadStatus(`${file.name} uploaded successfully!`);\n        setTimeout(() => setUploadStatus(''), 3000);\n      } else {\n        throw new Error('No run_id received from server');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus(`Upload failed for ${file.name}: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const identifyBottlenecks = async (runId) => {\n    if (!runId) return;\n    \n    // Find the job and mark it as having bottlenecks requested\n    setJobs(prevJobs => \n      prevJobs.map(job => \n        job.id === runId \n          ? { ...job, bottlenecksRequested: true } \n          : job\n      )\n    );\n    \n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/bottlenecks`, {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Bottlenecks response:', data);\n    } catch (error) {\n      console.error('Error identifying bottlenecks:', error);\n      alert('Error identifying bottlenecks: ' + error.message);\n      \n      // Reset the requested flag on error\n      setJobs(prevJobs => \n        prevJobs.map(job => \n          job.runId === runId \n            ? { ...job, bottlenecksRequested: false } \n            : job\n        )\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const suggestImprovements = async (runId) => {\n    if (!runId) return;\n    \n    // Find the job and mark it as having improvements requested\n    setJobs(prevJobs => \n      prevJobs.map(job => \n        job.runId === runId \n          ? { ...job, improvementsRequested: true } \n          : job\n      )\n    );\n    \n    setLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/process/improvements`, {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Improvements response:', data);\n    } catch (error) {\n      console.error('Error suggesting improvements:', error);\n      alert('Error suggesting improvements: ' + error.message);\n      \n      // Reset the requested flag on error\n      setJobs(prevJobs => \n        prevJobs.map(job => \n          job.runId === runId \n            ? { ...job, improvementsRequested: false } \n            : job\n        )\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const downloadAsMd = async (runId, type) => {\n    if (!runId) return;\n    \n    try {\n      const response = await fetch(`${API_URL}/runs/${runId}/export/${type}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Download response:', data);\n      \n      const element = document.createElement('a');\n      const file = new Blob([data.content], {type: 'text/markdown'});\n      element.href = URL.createObjectURL(file);\n      element.download = data.filename;\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      alert('Error downloading file: ' + error.message);\n    }\n  };\n\n  const removeJob = (runId) => {\n    setJobs(prevJobs => prevJobs.filter(job => job.runId !== runId));\n    \n    // If the removed job was selected, select another job or set to null\n    if (selectedJobId === runId) {\n      const remainingJobs = jobs.filter(job => job.runId !== runId);\n      setSelectedJobId(remainingJobs.length > 0 ? remainingJobs[0].runId : null);\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <header className=\"dashboard-header\">\n        <h1>I<span className=\"ai-text\">AI</span>S Tool</h1>\n      </header>\n      \n      <div className=\"dashboard-content\">\n        <aside className=\"sidebar\">\n          <div className=\"sidebar-header\">\n            <h2>Processes</h2>\n            <div className=\"upload-container\">\n              <input\n                type=\"file\"\n                accept=\"image/*,.pdf\"\n                onChange={handleFileUpload}\n                id=\"file-upload\"\n                multiple\n              />\n              <label htmlFor=\"file-upload\" className=\"upload-button\">\n                + New Process Map\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"jobs-list\">\n            {jobs.length === 0 ? (\n              <div className=\"no-jobs\">\n                <p>Upload a process map to get started</p>\n              </div>\n            ) : (\n              jobs.map(job => (\n                <div \n                  key={job.runId} \n                  className={`job-item ${selectedJobId === job.runId ? 'selected' : ''}`}\n                  onClick={() => setSelectedJobId(job.runId)}\n                >\n                  <div className=\"job-info\">\n                    <div className=\"job-name\">{job.fileName}</div>\n                    <div className=\"job-status\">\n                      {job.status === 'complete' ? (\n                        <>\n                          <span className=\"status-indicator complete\"></span>\n                          Complete\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"status-indicator processing\"></span>\n                          <span className=\"spinner-small\"></span>\n                          Processing\n                        </>\n                      )}\n                    </div>\n                    <div className=\"job-progress\">\n                      <div className=\"progress-bar\">\n                        <div \n                          className=\"progress-fill\" \n                          style={{ width: `${calculateProgress(job)}%` }}\n                        ></div>\n                      </div>\n                      <div className=\"progress-percentage\">{calculateProgress(job)}%</div>\n                    </div>\n                    <div className=\"job-time\">{job.uploadTime}</div>\n                  </div>\n                  <button \n                    className=\"remove-job\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeJob(job.runId);\n                    }}\n                  >\n                    ×\n                  </button>\n                </div>\n              ))\n            )}\n          </div>\n        </aside>\n        \n        <main className=\"main-content\">\n          {!selectedJob ? (\n            <div className=\"upload-area-container\">\n              <div \n                className=\"upload-area\"\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n              >\n                <div className=\"upload-content\">\n                  <h3>Upload Process Map</h3>\n                  <p>Drag and drop files here</p>\n                  <p className=\"file-types\">Limit 20MB per file (PDF, PNG, JPG, and JPEG)</p>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*,.pdf\"\n                    onChange={handleFileUpload}\n                    id=\"main-file-upload\"\n                    multiple\n                  />\n                  <label htmlFor=\"main-file-upload\" className=\"browse-button\">\n                    Browse files\n                  </label>\n                </div>\n                {uploadStatus && <div className=\"upload-status\">{uploadStatus}</div>}\n                {loading && <div className=\"loading\">Processing...</div>}\n              </div>\n              \n              <section className=\"instructions\">\n                <h2>Instructions</h2>\n                <p>To start, please upload an image or PDF of your process map. It can be a screenshot of a process map from a tool like Visio, Lucidchart, etc., a photo of a hand-drawn sketch, or any other visual representation of a process.</p>\n                <p>You can upload multiple process maps and they will be processed simultaneously.</p>\n              </section>\n            </div>\n          ) : (\n            <div className=\"job-details\">\n              <div className=\"job-header\">\n                <h2>{selectedJob.fileName}</h2>\n                <div className=\"job-actions\">\n                  <button \n                    className=\"action-button\"\n                    onClick={() => removeJob(selectedJob.runId)}\n                  >\n                    Remove Job\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"job-progress-overview\">\n                <h3>Overall Progress</h3>\n                <div className=\"progress-bar-large\">\n                  <div \n                    className=\"progress-fill\" \n                    style={{ width: `${calculateProgress(selectedJob)}%` }}\n                  ></div>\n                </div>\n                <div className=\"progress-steps\">\n                  <div className={`progress-step ${selectedJob.processMap ? 'complete' : 'active'}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.processMap ? (\n                        '✓'\n                      ) : (\n                        <span className=\"spinner\"></span>\n                      )}\n                    </div>\n                    <div className=\"step-label\">Process Map</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'transcription')}</div>\n                  </div>\n                  <div className={`progress-step ${selectedJob.bottlenecks ? 'complete' : selectedJob.bottlenecksRequested ? 'active' : ''}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.bottlenecks ? (\n                        '✓'\n                      ) : selectedJob.bottlenecksRequested ? (\n                        <span className=\"spinner\"></span>\n                      ) : (\n                        '2'\n                      )}\n                    </div>\n                    <div className=\"step-label\">Bottlenecks</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'bottlenecks')}</div>\n                  </div>\n                  <div className={`progress-step ${selectedJob.improvements ? 'complete' : selectedJob.improvementsRequested ? 'active' : ''}`}>\n                    <div className=\"step-indicator\">\n                      {selectedJob.improvements ? (\n                        '✓'\n                      ) : selectedJob.improvementsRequested ? (\n                        <span className=\"spinner\"></span>\n                      ) : (\n                        '3'\n                      )}\n                    </div>\n                    <div className=\"step-label\">Improvements</div>\n                    <div className=\"step-status\">{getStepStatus(selectedJob, 'improvements')}</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"job-content\">\n                <section className=\"process-section\">\n                  <h3>Process Map</h3>\n                  {selectedJob.processMap ? (\n                    <div className=\"text-area\">\n                      {selectedJob.processMap}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'transcription')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'transcription')}\n                    </div>\n                  )}\n                </section>\n                \n                <section className=\"bottlenecks-section\">\n                  <h3>Bottlenecks</h3>\n                  {selectedJob.currentStep >= 2 && !selectedJob.bottlenecks && !selectedJob.bottlenecksRequested && (\n                    <button \n                      className=\"action-button\" \n                      onClick={() => identifyBottlenecks(selectedJob.runId)}\n                      disabled={loading}\n                    >\n                      🔍 Identify bottlenecks\n                    </button>\n                  )}\n                  {selectedJob.bottlenecksRequested && !selectedJob.bottlenecks && (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'bottlenecks')}\n                    </div>\n                  )}\n                  {selectedJob.bottlenecks ? (\n                    <div className=\"text-area\">\n                      {selectedJob.bottlenecks}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'bottlenecks')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : selectedJob.currentStep < 2 ? (\n                    <div className=\"waiting-message\">\n                      {getStepStatus(selectedJob, 'bottlenecks')}\n                    </div>\n                  ) : null}\n                </section>\n                \n                <section className=\"improvements-section\">\n                  <h3>Improvements</h3>\n                  {selectedJob.currentStep >= 3 && !selectedJob.improvements && !selectedJob.improvementsRequested && (\n                    <button \n                      className=\"action-button\" \n                      onClick={() => suggestImprovements(selectedJob.runId)}\n                      disabled={loading}\n                    >\n                      💡 Suggest Improvements\n                    </button>\n                  )}\n                  {selectedJob.improvementsRequested && !selectedJob.improvements && (\n                    <div className=\"processing-message\">\n                      <span className=\"spinner-inline\"></span>\n                      {getStepStatus(selectedJob, 'improvements')}\n                    </div>\n                  )}\n                  {selectedJob.improvements ? (\n                    <div className=\"text-area\">\n                      {selectedJob.improvements}\n                      <button \n                        className=\"download-button\" \n                        onClick={() => downloadAsMd(selectedJob.runId, 'improvements')}\n                      >\n                        Download as .md\n                      </button>\n                    </div>\n                  ) : selectedJob.currentStep < 3 ? (\n                    <div className=\"waiting-message\">\n                      {getStepStatus(selectedJob, 'improvements')}\n                    </div>\n                  ) : null}\n                </section>\n              </div>\n            </div>\n          )}\n        </main>\n\n        <Chat selectedJob={selectedJob} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}